{"version":3,"sources":["helpers/wallet.ts","components/Sender.tsx","components/TransactionView.tsx","helpers/transactions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["cluster","connection","Connection","wallet","Wallet","a","connect","console","log","publicKey","toBase58","sendMoney","destPubkeyStr","lamports","destPubkey","PublicKey","getAccountInfo","walletAccountInfo","data","length","receiverAccountInfo","instruction","SystemProgram","transfer","fromPubkey","toPubkey","setWalletTransaction","trans","signAndSendTransaction","signature","confirmTransaction","result","warn","transaction","Transaction","add","feePayer","getRecentBlockhash","hash","recentBlockhash","blockhash","signTransaction","signedTrans","sendRawTransaction","serialize","Sender","didSendMoney","useState","amount","setAmount","address","setAddress","onClickSendMoney","e","preventDefault","className","htmlFor","type","value","onChange","target","Number","toString","onClick","TransactionItemView","meta","confirmedTransaction","preBalances","postBalances","fee","instructions","keys","pubkey","getTransactionItems","TransactionsView","transactions","map","TransactionWithSignature","getTransactions","getConfirmedSignaturesForAddress2","transSignatures","Array","i","getConfirmedTransaction","transWithSignature","push","App","setTransactions","conn","React","useRef","wall","useEffect","initWallet","then","current","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a8e9678.chunk.js","sourcesContent":["// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n  Connection,\n  SystemProgram,\n  Transaction,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport EventEmitter from \"eventemitter3\";\n\nexport interface WalletAdapter extends EventEmitter {\n  publicKey: PublicKey | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  connect: () => any;\n  disconnect: () => any;\n}\n\nconst cluster = \"http://devnet.solana.com\";\nconst connection = new Connection(cluster, \"confirmed\");\nconst wallet: WalletAdapter = new Wallet(\"https://www.sollet.io\", cluster);\n\nexport async function initWallet(): Promise<[Connection, WalletAdapter]> {\n  await wallet.connect();\n  console.log(\"wallet publicKey\", wallet?.publicKey?.toBase58());\n  return [connection, wallet];\n}\n\nexport async function sendMoney(\n  destPubkeyStr: string,\n  lamports: number = 500 * 1000000\n) {\n  try {\n    console.log(\"starting sendMoney\");\n    const destPubkey = new PublicKey(destPubkeyStr);\n    const walletAccountInfo = await connection.getAccountInfo(\n      wallet!.publicKey!\n    );\n    console.log(\"wallet data size\", walletAccountInfo?.data.length);\n\n    const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\n    console.log(\"receiver data size\", receiverAccountInfo?.data.length);\n\n    const instruction = SystemProgram.transfer({\n      fromPubkey: wallet!.publicKey!,\n      toPubkey: destPubkey,\n      lamports, // about half a SOL\n    });\n    let trans = await setWalletTransaction(instruction);\n\n    let signature = await signAndSendTransaction(wallet, trans);\n    let result = await connection.confirmTransaction(signature, \"singleGossip\");\n    console.log(\"money sent\", result);\n  } catch (e) {\n    console.warn(\"Failed\", e);\n  }\n}\n\nexport async function setWalletTransaction(\n  instruction: TransactionInstruction\n): Promise<Transaction> {\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.feePayer = wallet!.publicKey!;\n  let hash = await connection.getRecentBlockhash();\n  console.log(\"blockhash\", hash);\n  transaction.recentBlockhash = hash.blockhash;\n  return transaction;\n}\n\nexport async function signAndSendTransaction(\n  wallet: WalletAdapter,\n  transaction: Transaction\n): Promise<string> {\n  let signedTrans = await wallet.signTransaction(transaction);\n  console.log(\"sign transaction\");\n  let signature = await connection.sendRawTransaction(signedTrans.serialize());\n  console.log(\"send raw transaction\");\n  return signature;\n}\n","import React, { useState } from \"react\";\nimport { sendMoney } from \"../helpers/wallet\";\nimport \"./Sender.css\";\n\ninterface SenderProps {\n  didSendMoney: () => void;\n}\n\nconst Sender: React.FC<SenderProps> = ({ didSendMoney }) => {\n  const [amount, setAmount] = useState(0);\n  const [address, setAddress] = useState(\"\");\n\n  const onChangeAmount = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(e.target.value ? Number(e.target.value) : 0);\n  };\n\n  const onChangeAddress = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAddress(e.target.value ? e.target.value.toString() : \"\");\n  };\n\n  const onClickSendMoney = async (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    e.preventDefault();\n\n    await sendMoney(address, amount);\n    didSendMoney();\n  };\n\n  return (\n    <form className=\"send-container\">\n      <div className=\"send-inputs\">\n        <div className=\"send-top-left\">\n          <label htmlFor=\"amount\">Amount (lamports)</label>\n        </div>\n        <div className=\"send-mid-left\">\n          <label htmlFor=\"address\">Address</label>\n        </div>\n        <div className=\"send-top-right\">\n          <input type=\"text\" value={amount} onChange={onChangeAmount} />\n        </div>\n        <div className=\"send-mid-right\">\n          <input type=\"text\" value={address} onChange={onChangeAddress} />\n        </div>\n        <div className=\"send-bottom-right\">\n          <button className=\"send-buttons\" onClick={onClickSendMoney}>\n            Submit\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default Sender;\n","import React, { FC } from \"react\";\nimport { TransactionWithSignature } from \"../helpers/transactions\";\nimport \"./TransactionView.css\";\n\ninterface TransactionsViewProps {\n  transactions?: Array<TransactionWithSignature>;\n}\n\nconst TransactionsView: FC<TransactionsViewProps> = ({ transactions }) => {\n  const getTransactions = () => {\n    return transactions?.map((trans) => {\n      return <TransactionItemView key={trans.signature} transaction={trans} />;\n    });\n  };\n\n  return <div>{getTransactions()}</div>;\n};\n\ninterface TransactionItemViewProps {\n  transaction: TransactionWithSignature;\n}\nconst TransactionItemView: FC<TransactionItemViewProps> = ({ transaction }) => {\n  const getTransactionItems = () => {\n    const signature = transaction.signature?.toString();\n    const meta = transaction.confirmedTransaction.meta;\n    const trans = transaction.confirmedTransaction.transaction;\n    let amount = 0;\n    if (meta) {\n      amount = meta.preBalances[0] - meta.postBalances[0];\n    }\n    return (\n      <>\n        <li key={signature + \"signature\"}>\n          <label>Tx:</label> &nbsp;\n          {signature}\n        </li>\n        <li key={signature + \"fee\"}>\n          <label>Fee:</label>&nbsp;\n          {meta?.fee}\n        </li>\n        <li key={signature + \"amount\"}>\n          <label>Sent Amount:</label>&nbsp;\n          {amount}\n        </li>\n        <li key={signature + \"sender\"}>\n          <label>Sender:</label>&nbsp;\n          {trans.instructions[0].keys[0].pubkey.toBase58()}\n        </li>\n        <li key={signature + \"sender-balance\"}>\n          <label>Sender Balance:</label>&nbsp;\n          {meta?.postBalances[0]}\n        </li>\n        <li key={signature + \"receiver\"}>\n          <label>Receiver:</label>&nbsp;\n          {trans.instructions[0].keys[1].pubkey.toBase58()}\n        </li>\n        <li key={signature + \"receiver-balance\"}>\n          <label>Receiver Balance:</label>&nbsp;\n          {meta?.postBalances[1]}\n        </li>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"trans-item\">\n      <ul className=\"trans-meta\">{getTransactionItems()}</ul>\n    </div>\n  );\n};\n\nexport default TransactionsView;\n","import { Connection, PublicKey, ConfirmedTransaction } from \"@solana/web3.js\";\n\nexport class TransactionWithSignature {\n  constructor(\n    public signature: string,\n    public confirmedTransaction: ConfirmedTransaction\n  ) {}\n}\n\nexport async function getTransactions(\n  connection: Connection,\n  address: PublicKey\n): Promise<Array<TransactionWithSignature>> {\n  const transSignatures = await connection.getConfirmedSignaturesForAddress2(\n    address\n  );\n\n  const transactions = new Array<TransactionWithSignature>();\n  for (let i = 0; i < transSignatures.length; i++) {\n    const signature = transSignatures[i].signature;\n    const confirmedTransaction = await connection.getConfirmedTransaction(\n      signature\n    );\n    if (confirmedTransaction) {\n      const transWithSignature = new TransactionWithSignature(\n        signature,\n        confirmedTransaction\n      );\n      transactions.push(transWithSignature);\n    }\n  }\n  return transactions;\n}\n","import { Connection } from \"@solana/web3.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Sender from \"./components/Sender\";\nimport TransactionsView from \"./components/TransactionView\";\nimport {\n  getTransactions,\n  TransactionWithSignature,\n} from \"./helpers/transactions\";\nimport { initWallet, WalletAdapter } from \"./helpers/wallet\";\n\nfunction App() {\n  const [transactions, setTransactions] =\n    useState<Array<TransactionWithSignature>>();\n  const conn = React.useRef<Connection>();\n  const wall = React.useRef<WalletAdapter>();\n\n  useEffect(() => {\n    initWallet().then(([connection, wallet]: [Connection, WalletAdapter]) => {\n      conn.current = connection;\n      wall.current = wallet;\n      if (wallet.publicKey) {\n        getTransactions(connection, wallet.publicKey).then((trans) => {\n          setTransactions(trans);\n        });\n      }\n    });\n  }, []);\n\n  const didSendMoney = () => {\n    getTransactions(conn.current!, wall.current!.publicKey!).then((trans) => {\n      setTransactions(trans);\n    });\n  };\n\n  return (\n    <div className=\"app-body\">\n      <div className=\"app-body-top\">\n        <h3>Send Money on Solana</h3>\n        <Sender didSendMoney={didSendMoney} />\n      </div>\n      <div className=\"app-body-mid\">\n        <TransactionsView transactions={transactions} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}